filter {
################################
# Object Expirer patterns
################################
#
# EXAMPLE LOG ENTRIES
################################
# OBJ_EXP_START Oct 15 13:13:00 localhost.localdomain object-expirer: Pass beginning; 0 possible containers; 0 possible objects
# OBJ_EXP_FINISH Oct 15 13:13:00 localhost.localdomain object-expirer: Pass completed in 0s; 0 objects expired
################################
  if [programname] == "object-expirer" {
    if [severity] == "info" or [severity] == "notice" {
      if "beginning" in [message] {
        grok {
          patterns_dir => ["/etc/logstash/patterns", "/etc/logstash/extra_patterns"]
          match => { "message" => " Pass beginning; %{BASE10NUM:PossibleExpiredSetupContainers:int} possible containers; %{BASE10NUM:PossibleExpiredSetupObject:} possible objects \(txn: %{NOTSPACE:txn}\)" }
          add_tag => ["swift", "OBJ_EXP_START"]
          remove_tag => ["_grokparsefailure"]
        }
      }
      else {
        grok {
          match => { "message" => " Pass completed in %{NUMBER:CompletedExpriedObjectPurgeSeconds:int}s; %{BASE10NUM:NumberOfObjectsExpired:int} objects expired \(txn: %{NOTSPACE:txn}\)" }
          remove_tag => ["_grokparsefailure"]
          add_tag => ["swift", "OBJ_EXP_FINISH"]
        }
      }
    }
    else if [severity] == "err" {
      if "ERROR" in [message] {
        grok {
          patterns_dir => ["/etc/logstash/patterns", "/etc/logstash/extra_patterns"]
          match => { "message" => " Exception dumping recon cache: LockTimeout \(%{NUMBER:LockTimeoutSeconds:int}s\) %{COPYFROMUNICODE:RsyncObjectPartition} \(txn: %{TXN:txn}\)" }
          remove_tag => ["_grokparsefailure"]
          add_tag => ["swift", "OBJ_EXP_ERR_LOCKTIMEOUT"]
        }
      }
    }
  }
# Object Reconstructor patterns
################################
#
# EXAMPLE LOG ENTRIES
################################
# OBJ_RECONSTRUCTOR_START Oct 15 13:12:52 localhost.localdomain object-reconstructor: Starting object reconstruction pass.
# OBJ_RECONSTRUCTOR_CHECK Oct 15 13:12:22 localhost.localdomain object-reconstructor: Nothing reconstructed for 0.000535011291504 seconds.
# OBJ_RECONSTRUCTOR_FINISH Oct 15 13:12:52 localhost.localdomain object-reconstructor: Object reconstruction complete. (0.00 minutes)
################################
  if [programname] == "object-reconstructor" {
    if [severity] == "info" or [severity] == "notice" {
      if "Starting object reconstruction pass." in [message] {
        grok {
          patterns_dir => ["/etc/logstash/patterns", "/etc/logstash/extra_patterns"]
          match => { "message" => " Starting object reconstruction pass." }
          remove_tag => ["_grokparsefailure"]
          add_tag => ["swift", "OBJ_REC_START"]
        }
      }
      else if "complete" in [message] {
        grok {
          patterns_dir => ["/etc/logstash/patterns", "/etc/logstash/extra_patterns"]
          match => { "message" => " Object reconstruction complete. \(%{NUMBER:ReconstructorCompletedMinutes:int} minutes\)" }
          remove_tag => ["_grokparsefailure"]
          add_tag => ["swift", "OBJ_REC_FINISH"]
        }
      }
      else if ("partitions reconstructed in" in [message] and "remaining" in [message]) {
        grok {
          patterns_dir => ["/etc/logstash/patterns", "/etc/logstash/extra_patterns"]
          match => { "message" => " %{BASE10NUM:ReconstructedPartitionsNum:int}/%{BASE10NUM:TotalReconstructedPartitionsNum:int} \(%{NUMBER:PartitionReconstructedPercent:float}\%\) partitions reconstructed in %{NUMBER:ReconstructedHasRunInSeconds:int}s (?:\(%{NUMBER:PartitionReconstructedRate:float}/sec, %{NUMBER:ReconstructedMinsRemaining:int}m remaining\)|\(%{NUMBER:PartitionReconstructedRate:float}/sec, %{NUMBER:ReconstructedSecondsRemaining:int}s remaining\)|\(%{NUMBER:PartitionReconstructedRate:float}/sec, %{NUMBER:ReconstructedHoursRemaining:int}h remaining\))" }
          #add_field => [ "partition_time", "%{@timestamp}" ]
          remove_tag => ["_grokparsefailure"]
          add_tag => ["swift", "OBJ_REC_PART_PROGRESS"]
        }
      }
      else if "Removing partition" in [message] {
        grok {
          match => { "message" => " Removing partition: %{NOTSPACE:ReconstructorRemovingPartition}" }
          remove_tag => ["_grokparsefailure"]
          add_tag => ["swift", "OBJ_REC_REMOVE_PART"]
        }
      }
      else if ("devices reconstructed in" in [message] and "remaining" in [message]) {
        grok {
          patterns_dir => ["/etc/logstash/patterns", "/etc/logstash/extra_patterns"]
          match => { "message" => " %{BASE10NUM:ReconstructedPartitionsNum:int}/%{BASE10NUM:TotalPartitionsNum:int} \(%{NUMBER:PartitionPercent:float}\%\) partitions of %{BASE10NUM:ReconstructedDeviceNum:int}/%{BASE10NUM:TotalDeviceNum:int} \(%{NUMBER:DevicePercent:float}\%\) devices reconstructed in %{NUMBER:HasRunInSeconds:int}s (?:\(%{NUMBER:PartitionOfDeviceReconstructedRate:float}/sec, %{NUMBER:MinsRemaining:int}m remaining\)|\(%{NUMBER:PartitionOfDeviceReconstructedRate:float}/sec, %{NUMBER:SecondsRemaining:int}s remaining\)|\(%{NUMBER:PartitionOfDeviceReconstructedRate:float}/sec, %{NUMBER:HoursRemaining:int}h remaining\))" }
          #add_field => [ "partition_time", "%{@timestamp}" ]
          remove_tag => ["_grokparsefailure"]
          add_tag => ["swift", "OBJ_REC_PART_OF_DEV_PROGRESS"]
        }
      }
      else if "Partition times" in [message] and "max" in [message] and "min" in [message] and "med" in [message] {
        grok {
          patterns_dir => ["/etc/logstash/patterns", "/etc/logstash/extra_patterns"]
          match => { "message" => " Partition times: max %{NUMBER:MaxReconstructorTime:float}s, min %{NUMBER:MinReconstructorTime:float}s, med %{NUMBER:MedReconstructorTime:float}s" }
          remove_tag => ["_grokparsefailure"]
          add_tag => ["swift", "OBJ_REC_PARTITION_TIME"]
        }
      }
      else if "suffixes checked" in [message] and "hashed" in [message] and "synced" in [message] {
        grok {
          patterns_dir => ["/etc/logstash/patterns", "/etc/logstash/extra_patterns"]
          match => { "message" => " %{NUMBER:NumOfSufixesChecked:int} suffixes checked - %{NUMBER:HashedPercentage:float}% hashed, %{NUMBER:SyncedPercentage:float}% synced" }
          remove_tag => ["_grokparsefailure"]
          add_tag => ["swift", "OBJ_REC_SUFFIXES_CHECK"]
        }
      }
      else if "Nothing reconstructed for" in [message] and "seconds." in [message] {
        grok {
          patterns_dir => ["/etc/logstash/patterns", "/etc/logstash/extra_patterns"]
          match => { "message" => " Nothing reconstructed for %{NUMBER:NothingReconstructorSeconds:int} seconds." }
          remove_tag => ["_grokparsefailure"]
          add_tag => ["swift", "OBJ_REC_CHECK"]
        }
      }
    }
  }
################################
# Object Updater patterns
################################
  if [programname] == "object-updater" {
    if [severity] == "info" or [severity] == "notice" {
      if "Object update sweep completed on" in [message] {
        grok {
          patterns_dir => ["/etc/logstash/patterns", "/etc/logstash/extra_patterns"]
          match => { "message" => " Object update sweep completed on %{URIPATHPARAM:UpdSweepPath} in %{NUMBER:UpdSPRunTime:float}s seconds:, %{BASE10NUM:UpdSPNumOfSuc} successes, %{BASE10NUM:UpdSPNumOfFail} failures, %{BASE10NUM:UpdSPNumOfQuaranties} quarantines, %{BASE10NUM:UpdSPNumOfUnlink} unlinks, %{BASE10NUM:UpdSPNumOfErr} errors \(pid: %{WORD:UpdSPPID}\)" }
          remove_tag => ["_grokparsefailure"]
          add_tag => ["swift", "OBJ_UPD_SWEEPPARTITON_COMPLETE"]
        }
      }
      else if "Object update sweep of" in [message] {
        grok {
          patterns_dir => ["/etc/logstash/patterns", "/etc/logstash/extra_patterns"]
          match => { "message" => " Object update sweep of %{WORD:UpdSweepDrive} completed: %{NUMBER:UpdSDRunTime:float}s, %{BASE10NUM:UpdSDNumOfSuc:int} successes, %{BASE10NUM:UpdSDNumOfFail:int} failures, %{BASE10NUM:UpdSDNumOfQuaranties:int} quarantines, %{BASE10NUM:UpdSDNumOfUnlink:int} unlinks, %{BASE10NUM:UpdSDNumOfErr:int} errors" }
          remove_tag => ["_grokparsefailure"]
          add_tag => ["swift", "OBJ_UPD_SWEEPDRIVE_COMPLETE"]
        }
      }
      else if "Object update sweep starting on" in [message] {
        grok {
          patterns_dir => ["/etc/logstash/patterns", "/etc/logstash/extra_patterns"]
          match => { "message" => " Object update sweep starting on %{URIPATHPARAM:UpdSweepStartPartitionPath} \(pid: %{WORD:UpdStartPID}\)" }
          remove_tag => ["_grokparsefailure"]
          add_tag => ["swift", "OBJ_UPD_SWEEP_START"]
        }
      }
      else if "Begin object update sweep" in [message] {
        grok {
          patterns_dir => ["/etc/logstash/patterns", "/etc/logstash/extra_patterns"]
          match => { "message" => " Begin object update sweep" }
          remove_tag => ["_grokparsefailure"]
          add_tag => ["swift", "OBJ_UPD_SWEEP_BEGIN"]
        }
      }
    }
  }
################################
# Object Auditor patterns
################################
#
# EXAMPLE LOG ENTRIES
################################
# OBJ_AUD_START Oct 15 13:16:20 localhost.localdomain object-auditor: Begin object audit "forever" mode (ZBF)
# OBJ_AUD_PROGRESS Oct 15 13:16:20 localhost.localdomain object-auditor: Object audit (ZBF). Since Thu Oct 15 20:16:20 2015: Locally: 1 passed, 0 quarantined, 0 errors files/sec: 248.76 , bytes/sec: 0.00, Total time: 0.00, Auditing time: 0.00, Rate: 0.00
# OBJ_AUD_FINISH Oct 15 13:18:52 localhost.localdomain object-auditor: Object audit (ZBF) "forever" mode completed: 151.23s. Total quarantined: 0, Total errors: 0, Total files/sec: 50.01, Total bytes/sec: 0.00, Auditing time: 149.82, Rate: 0.99
############# ##################
  if [programname] == "object-auditor" {
    if [severity] == "info" or [severity] == "notice" {
      if "Begin" in [message] {
        grok {
          match => { "message" => " Begin object audit \"%{WORD:AuditMode}\" mode \(%{WORD:AuditType}\)" }
          remove_tag => ["_grokparsefailure"]
          add_tag => ["swift", "OBJ_AUD_START"]
        }
      }
      else if "completed" in [message] {
        grok {
          match => { "message" => " Object audit \(%{WORD:AuditType}\) \"%{WORD:AuditMode}\" mode completed: %{NUMBER:AuditCompletedSeconds:float}s. Total quarantined: %{BASE10NUM:TotalAuditQuarantined:int}, Total errors: %{BASE10NUM:TotalAuditErrors:int}, Total files/sec: %{NUMBER:TotalAuditFilesPerSec:float}, Total bytes/sec: %{NUMBER:TotalAuditBytesPerSec:float}, Auditing time: %{NUMBER:TotalAuditingTime:float}, Rate: %{NUMBER:TotalAuditRate:float}" }
          remove_tag => ["_grokparsefailure"]
          add_tag => ["swift", "OBJ_AUD_FINISH"]
        }
      }
      else {
        grok {
          patterns_dir => ["/etc/logstash/patterns", "/etc/logstash/extra_patterns"]
          match => { "message" => " Object audit \(%{WORD:AuditType}\). Since %{SWIFT_AUDITOR_DATETIME:AuditorCheckTimeSince}: Locally: %{BASE10NUM:AuditNumberPassed:int} passed, %{BASE10NUM:AuditNumberQuarantined:int} quarantined, %{BASE10NUM:AuditNumberErrors:int} errors, files/sec: %{NUMBER:AuditFilesPerSecond:float}, bytes/sec: %{NUMBER:AuditBytesPerSecond:float}, Total time: %{NUMBER:TotalAuditProcessTime:float}, Auditing time: %{NUMBER:TotalAuditTime:float}, Rate: %{NUMBER:AuditRate:float}" }
          remove_tag => ["_grokparsefailure"]
          add_tag => ["swift", "OBJ_AUD_PROGRESS"]
        }
      }
    }
    else if [severity] == "err" {
      if "STDOUT: Unable to find object-replicator config section" in [message] {
        grok {
          patterns_dir => ["/etc/logstash/patterns", "/etc/logstash/extra_patterns"]
          match => { "message" => " STDOUT: Unable to find object-replicator config section in %{COPYFROMUNICODE:AudtorUnableFindReplicatorConfigIn}" }
          remove_tag => ["_grokparsefailure"]
          add_tag => ["swift", "OBJ_AUD_ERROR"]
        }
      }
    }
  }
################################
# Object Replicator patterns
################################
#
# EXAMPLE LOG ENTRIES
# ##############################
# OBJ_REP_START Oct 15 13:11:48 localhost.localdomain object-replicator: Starting object replication pass.
# OBJ_REP_PROGRESS Oct 15 13:12:58 localhost.localdomain object-replicator: 7401/7401 (100.00%) partitions replicated in 69.92s (105.85/sec, 0s remaining)
# OBJ_REP_FINISH Oct 15 13:12:58 localhost.localdomain object-replicator: Object replication complete. (1.17 minutes)
# ##############################
  if [programname] == "object-replicator" {
    if [severity] == "info" or [severity] == "notice" {
      if "Starting object replication pass." in [message] {
        grok {
          patterns_dir => ["/etc/logstash/patterns", "/etc/logstash/extra_patterns"]
          match => { "message" => " Starting object replication pass." }
          remove_tag => ["_grokparsefailure"]
          add_tag => ["swift", "OBJ_REP_START"]
        }
      }
      else if "complete" in [message] {
        grok {
          patterns_dir => ["/etc/logstash/patterns", "/etc/logstash/extra_patterns"]
          match => { "message" => " Object replication complete. \(%{NUMBER:TotalReplicatorTimeMinutes:float} minutes\)" }
          remove_tag => ["_grokparsefailure"]
          add_tag =>  [ "swift", "OBJ_REP_FINISH" ]
        }
      }
      else if ("successes" in [message] and "failures" in [message]) {
        grok {
          match => { "message" => " %{NUMBER:ReplicatorNumOfSuccess:int} successes, %{NUMBER:ReplicatorNumOfFail:int} failures" }
          remove_tag => ["_grokparsefailure"]
          add_tag => ["swift", "OBJ_REP_RATE"]
        }
      }
      else if ("Successful rsync of" in [message] and "at" in [message]) {
        grok {
          patterns_dir => ["/etc/logstash/patterns", "/etc/logstash/extra_patterns"]
          match => { "message" => " Successful rsync of %{COPYFROMUNICODE:ReplicatorRsyncObjectPartition} at %{IP:ReplicatorSwiftNode_IP}::%{COPYFROMUNICODE:ReplicatorRsyncObject} \(%{NUMBER:ReplicatorRsyncSec:float}\)" }
          remove_tag => ["_grokparsefailure"]
          add_tag => ["swift", "OBJ_REP_RSYNC"]
        }
      }
      else if "<f+++++++++" in [message] and ".ts" in [message] {
        grok {
          patterns_dir => ["/etc/logstash/patterns", "/etc/logstash/extra_patterns"]
          match => { "message" => " \<f\+++++++++ %{COPYFROMUNICODE:tombstonefilelocation}" }
          remove_tag => ["_grokparsefailure"]
          add_tag => ["swift", "OBJ_REP_TSLOCAION"]
        }
      }
      else if ("<f+++++++++" in [message]) {
        grok {
          patterns_dir => ["/etc/logstash/patterns", "/etc/logstash/extra_patterns"]
          match => { "message" => " \<f\+++++++++ %{COPYFROMUNICODE:ReplicatorRsyncObjectPartitionData}" }
          remove_tag => ["_grokparsefailure"]
          add_tag => ["swift", "OBJ_REP_RSYNC_PARTITON_DATA"]
        }
      }
      else if "Partition times" in [message] {
        grok {
          match => { "message" => " Partition times: max %{NUMBER:ReplicatorMaxPartitionSec:float}s, min %{NUMBER:ReplicatorMinPartitionSec:float}s, med %{NUMBER:ReplicatorMedPartitionSec:float}s" }
          remove_tag => ["_grokparsefailure"]
          add_tag => ["swift", "OBJ_REP_PARTITION"]
        }
      }
      else if ("partitions replicated in" in [message] and "remaining" in [message]) {
        grok {
          patterns_dir => ["/etc/logstash/patterns", "/etc/logstash/extra_patterns"]
          match => { "message" => " %{BASE10NUM:ReplicatedPartitionsNum:int}/%{BASE10NUM:TotalPartitionsReplicatedNum:int} \(%{NUMBER:PartitionReplicatedPercent:float}\%\) partitions replicated in %{NUMBER:ReplicatedHasRunInSeconds:int}s (?:\(%{NUMBER:PartitionReplicatedRate:float}/sec, %{NUMBER:ReplicatedMinsRemaining:int}m remaining\)|\(%{NUMBER:PartitionReplicatedRate:float}/sec, %{NUMBER:ReplicatedSecondsRemaining:int}s remaining\)|\(%{NUMBER:PartitionReplicatedRate:float}/sec, %{NUMBER:ReplicatedHoursRemaining:int}h remaining\))" }
          #add_field => [ "partition_time", "%{@timestamp}" ]
          remove_tag => ["_grokparsefailure"]
          add_tag => ["swift", "OBJ_REP_PART_PROGRESS"]
        }
      }
      else if ("Removing partition" in [message]) {
        grok {
          patterns_dir => ["/etc/logstash/patterns", "/etc/logstash/extra_patterns"]
          match => { "message" => " Removing partition: %{COPYFROMUNICODE:ReplicatorRemovingPartition}" }
          remove_tag => ["_grokparsefailure"]
          add_tag => ["swift", "OBJ_REP_PART_REMOVING"]
        }
      }
      else if "suffixes checked" in [message] {
        grok {
          patterns_dir => ["/etc/logstash/patterns", "/etc/logstash/extra_patterns"]
          match => { "message" => " %{NUMBER:ReplicatorSuffixCheck:int} suffixes checked - %{NUMBER:ReplicatorSuffixCheckHash:float}% hashed, %{NUMBER:ReplicatorSuffixCheckSync:float}% synced" }
          remove_tag => ["_grokparsefailure"]
          add_tag => ["swift", "OBJ_REP_SUFFIXCHECK"]
        }
      }
      else if "Nothing replicated" in [message] {
        grok {
          patterns_dir => ["/etc/logstash/patterns", "/etc/logstash/extra_patterns"]
          match => { "message" => " Nothing replicated for %{NUMBER:NothingReplicationSeconds:float} seconds." }
          remove_tag => ["_grokparsefailure"]
          add_tag => ["swift", "OBJ_REP_NOTHING"]
        }
      }
    }
    else if [severity] == "err" {
      if "STDERR" in [message] {
        grok {
          patterns_dir => ["/etc/logstash/patterns", "/etc/logstash/extra_patterns"]
          match => { "message" => " STDERR: %{COPYFROMUNICODE:ReplicatorSTDERRMsg}" }
          remove_tag => ["_grokparsefailure"]
          add_tag => ["swift", "OBJ_REP_STDERR"]
        }
      }
      else if "@ERROR" in [message] {
        grok {
          patterns_dir => ["/etc/logstash/patterns", "/etc/logstash/extra_patterns"]
          match => { "message" => " @ERROR: %{COPYFROMUNICODE:ReplicatorERRORMsg}" }
          remove_tag => ["_grokparsefailure"]
          add_tag => ["swift", "OBJ_REP_ERROR"]
        }
      }
    }
  }
################################
# object server patterns
################################
  if [programname] == "object-server" {
    if [severity] == "info" or [severity] == "notice" {
      if "ERROR container update failed with" in [message] {
        grok {
          patterns_dir => ["/etc/logstash/patterns", "/etc/logstash/extra_patterns"]
          match => { "message" => "ERROR container update failed with %{IP:node_ip}:%{BASE10NUM:node_port}/%{NOTSPACE:drive_id} \(saving for async update later\): Timeout \(%{NUMBER:timeout_time:float}s\) (?:\(txn: %{TXN:txn}\))" }
          remove_tag => ["_grokparsefailure"]
          add_tag => ["swift", "OBJ_SER_TRANSACTION_TIMEOUT_ERR"]
        }
      }
      else if "ERROR __call__ error with REPLICATE" in [message] and "No space left on device" in [message] {
        grok {
          patterns_dir => ["/etc/logstash/patterns", "/etc/logstash/extra_patterns"]
          match => { "message" => "ERROR __call__ error with REPLICATE %{COPYFROMUNICODE:PartitionAndHashSurfix} : \[Errno %{NOTSPACE:ErrorNo}\] No space left on device: %{COPYFROMUNICODE:tmplocation}" }
          remove_tag => ["_grokparsefailure"]
          add_tag => ["swift", "OBJ_SER_TRANSACTION_NoSpace_ERR"]
        }
      }
      else {
        grok {
          patterns_dir => ["/etc/logstash/patterns", "/etc/logstash/extra_patterns"]
          match => { "message" => "%{IP:remote_addr} - - \[%{SWIFT_DATETIME:datetime} \+0000\] \"%{WORD:request_method} %{URIPATHPARAM:request_path}\" %{NUMBER:status_int} (?:%{NUMBER:content_length}|-) \"(?:%{COPYFROMUNICODE:referer}|-)\" \"(?:%{TXN:transaction_id}|-)\" \"(?:%{COPYFROMUNICODE:user_agent}|-)\" %{NUMBER:request_time:float} \"-\" %{NUMBER:server_pid,int} (?:%{NUMBER:policy_index:int}|-)" }
          remove_tag => ["_grokparsefailure"]
          add_tag => ["swift", "OBJ_SER_TRANSACTION"]
        }
      }
    }
  }
}
