filter {
################################
# container Replicator patterns
################################
  if [programname] == "container-replicator" {
    if [severity] == "info" or [severity] == "notice" {
      if "Beginning" in [message] {
        grok {
          patterns_dir => ["/etc/logstash/patterns", "/etc/logstash/extra_patterns"]
          match => { "message" => " Beginning replication run" }
          remove_tag => ["_grokparsefailure"]
          add_tag => ["swift", "CONT_REP_START"]
        }
      }
      else if "OVER" in [message] {
        grok {
          patterns_dir => ["/etc/logstash/patterns", "/etc/logstash/extra_patterns"]
          match => { "message" => " Replication run OVER" }
          remove_tag => ["_grokparsefailure"]
          add_tag =>  [ "swift", "CONT_REP_FINISH" ]
        }
      }
      else if "Attempted to replicate" in [message] {
        grok {
          match => { "message" => " Attempted to replicate %{NUMBER:ReplicatorNumDBs:int} dbs in %{NUMBER:ReplicationDBsSeconds:float} seconds \(%{NUMBER:ReplicationDBsBytePerSecond:float}/s\)" }
          remove_tag => ["_grokparsefailure"]
          add_tag => ["swift", "CONT_REP_ATTEMPTED"]
        }
      }
      else if "Removed" in [message] {
        grok {
          match => { "message" => " Removed %{NUMBER:ReplicatorRemovedDBs} dbs" }
          remove_tag => ["_grokparsefailure"]
          add_tag => ["swift", "CONT_REP_REMOVED"]
        }
      }
      else if ("diff" in [message] and "diff_capped" in [message] and "empty" in [message] and "hashmatch" in [message] and "no_change" in [message] and "remote_merge" in [message] and "rsync" in [message] and "ts_repl" in [message]) {
        grok {
          match => { "message" => [" no_change:%{NUMBER:ReplicationNoChange:int} ts_repl:%{NUMBER:ReplicationTS:int} diff:%{NUMBER:ReplicationDiff:int} rsync:%{NUMBER:ReplicationRsync:int} diff_capped:%{NUMBER:ReplicationDiffCap:int} hashmatch:%{NUMBER:ReplicationHashMatch:int} empty:%{NUMBER:ReplicationEmpty:int}", " diff\:%{NUMBER:ReplicationDiff} diff_capped\:%{NUMBER:ReplicationDiffCap} empty\:%{NUMBER:ReplicationEmpty} hashmatch\:%{NUMBER:ReplicationHashMatch} no_change\:%{NUMBER:ReplicationNoChange} remote_merge\:%{NUMBER:ReplicationRemoteMerge} rsync\:%{NUMBER:ReplicationRsync} ts_repl\:%{NUMBER:ReplicationTS}"] }
          remove_tag => ["_grokparsefailure"]
          add_tag => ["swift", "CONT_REP_CHANGE"]
        }
      }
      else if "Replicating db" in [message] {
        grok {
          patterns_dir => ["/etc/logstash/patterns", "/etc/logstash/extra_patterns"]
          match => { "message" => " Replicating db %{COPYFROMUNICODE:ReplicatingDBFilePath}" }
          remove_tag => ["_grokparsefailure"]
          add_tag => ["swift", "CONT_REP_DB"]
        }
      }
      else if "Syncing chunks with" in [message] {
        grok {
          patterns_dir => ["/etc/logstash/patterns", "/etc/logstash/extra_patterns"]
          match => { "message" => " Syncing chunks with %{IP:SwiftNodeIP}, starting at %{NUMBER:StartingAt:int}" }
          remove_tag => ["_grokparsefailure"]
          add_tag => ["swift", "CONT_REP_DB_SYNC"]
        }
      }
      else if ("diff:" in [message] and "diff_capped:" in [message] and "empty:" in [message] and "hashmatch:" in [message] and "no_change:" in [message] and "remote_merge:" in [message] and "rsync:" in [message] and "ts_repl:" in [message]) {
        grok {
          patterns_dir => ["/etc/logstash/patterns", "/etc/logstash/extra_patterns"]
          match => { "message" => " diff:%{NUMBER:ContRepNumOfDiff:int} diff_capped:%{NUMBER:ContRepNumOfDiffCapped:int} empty:%{NUMBER:ContRepNumOfEmpty:int} hashmatch:%{NUMBER:ContRepNumOfHashMatch:int} no_change:%{NUMBER:ContRepNumOfNoChange:int} remote_merge:%{NUMBER:ContRepNumOfRemoteMerge:int} rsync:%{NUMBER:ContRepNumOfRsync:int} ts_repl:%{NUMBER:ContRepNumOfTSRepl:int}" }
          remove_tag => ["_grokparsefailure"]
          add_tag => ["swift", "CONT_REP_STATISTICS"]
        }
      }
      else if "ERROR reading HTTP response from" in [message] {
        grok {
          patterns_dir => ["/etc/logstash/patterns", "/etc/logstash/extra_patterns"]
          match => { "message" => " ERROR reading HTTP response from %{COPYFROMUNICODE:ErrorReadHTTPResponse_json}: Timeout \(%{NUMBER:ReadHTTPTimeOutSeconds:float}s\)" }
          remove_tag => ["_grokparsefailure"]
          add_tag => ["swift", "CONT_REP_TIMEOUT"]
        }
      }
      else if "Skipping" in [message] and "as it is not mounted" in [message] {
        grok {
          patterns_dir => ["/etc/logstash/patterns", "/etc/logstash/extra_patterns"]
          match => { "message" => " Skipping %{NOTSPACE:driveID} as it is not mounted" }
          remove_tag => ["_grokparsefailure"]
          add_tag => ["swift", "CONT_REP_SKIP_NOT_MOUNTED"]
        }
      }
      else {
        grok {
          patterns_dir => ["/etc/logstash/patterns", "/etc/logstash/extra_patterns"]
          match => { "message" => " %{NUMBER:ReplicationSuccess:int} successes, %{NUMBER:ReplicationFail:int} failures" }
          remove_tag => ["_grokparsefailure"]
          add_tag => ["swift", "CONT_REP_RATE"]
        }
      }
    }
    else if [severity] == "err" {
      if "ERROR reading HTTP response from" in [message] {
        grok {
          patterns_dir => ["/etc/logstash/patterns", "/etc/logstash/extra_patterns"]
          match => { "message" => " ERROR reading HTTP response from %{COPYFROMUNICODE:ReplicatorHttp_err_response_json}: %{COPYFROMUNICODE:ReplicatorErr_msg}" }
          remove_tag => ["_grokparsefailure"]
          add_tag => ["swift", "CONT_REP_ERR"]
        }
      }
    }
  }
################################
# container Reconciler patterns
################################
  if [programname] == "container-reconciler" {
    if [severity] == "info" or [severity] == "notice" {
      if "sleeping" in [message] {
        grok {
          patterns_dir => ["/etc/logstash/patterns", "/etc/logstash/extra_patterns"]
          match => { "message" => " sleeping between intervals \(%{NUMBER:ReconcilerSleepSec:int}s\) \(txn: %{TXN:txn}\)" }
          remove_tag => ["_grokparsefailure"]
          add_tag => ["swift", "CONT_REC_SLEEP"]
        }
      }
      else if "finished container" in [message] {
        grok {
          patterns_dir => ["/etc/logstash/patterns", "/etc/logstash/extra_patterns"]
          match => { "message" => " finished container %{NOTSPACE:TranTimeStamp} \(txn: %{NOTSPACE:txn}\)" }
          remove_tag => ["_grokparsefailure"]
          add_tag => ["swift", "CONT_REC_FINISH"]
        }
      }
      else if "looking for objects in" in [message] {
        grok {
          patterns_dir => ["/etc/logstash/patterns", "/etc/logstash/extra_patterns"]
          match => { "message" => " looking for objects in %{NOTSPACE:TranTimeStamp} \(txn: %{NOTSPACE:txn}\)" }
          remove_tag => ["_grokparsefailure"]
          add_tag => ["swift", "CONT_REC_LOOKING_FOR"]
        }
      }
      else if "pulling items from the queue" in [message] {
        grok {
          patterns_dir => ["/etc/logstash/patterns", "/etc/logstash/extra_patterns"]
          match => { "message" => " pulling items from the queue \(txn: %{NOTSPACE:txn}\)" }
          remove_tag => ["_grokparsefailure"]
          add_tag => ["swift", "CONT_REC_PULLING_ITEM_FROM_QUEUEN"]
        }
      }
      else if "looking for containers in .misplaced_objects" in [message] {
        grok {
          patterns_dir => ["/etc/logstash/patterns", "/etc/logstash/extra_patterns"]
          match => { "message" => " looking for containers in .misplaced_objects \(txn: %{NOTSPACE:txn}\)" }
          remove_tag => ["_grokparsefailure"]
          add_tag => ["swift", "CONT_REC_LOOKING_CONT_MISPLACE_OBJ"]
        }
      }
      else {
        grok {
          patterns_dir => ["/etc/logstash/patterns", "/etc/logstash/extra_patterns"]
          match => { "message" => " Reconciler Stats: {} \(txn: %{TXN:txn}\)" }
          remove_tag => ["_grokparsefailure"]
          add_tag => ["swift", "CONT_REC_STAT"]
        }
      }
    }
    else if [severity] == "err" {
      if "ERROR reading HTTP response from" in [message] {
        grok {
          patterns_dir => ["/etc/logstash/patterns", "/etc/logstash/extra_patterns"]
          match => { "message" => " STDERR: %{COPYFROMUNICODE:ReconcilerStderr_response_json} \(txn: %{NOTSPACE:txn}\)" }
          remove_tag => ["_grokparsefailure"]
          add_tag => ["swift", "CONT_REC_ERR"]
        }
      }
    }
  }
################################
# container Updater patterns
################################
  if [programname] == "container-updater" {
    if [severity] == "info" or [severity] == "notice" {
      if "Begin" in [message] {
        grok {
          patterns_dir => ["/etc/logstash/patterns", "/etc/logstash/extra_patterns"]
          match => { "message" => " Begin container update sweep" }
          remove_tag => ["_grokparsefailure"]
          add_tag => ["swift", "CONT_UPD_START"]
        }
      }
      else if "Container update sweep of" in [message] {
        grok {
          patterns_dir => ["/etc/logstash/patterns", "/etc/logstash/extra_patterns"]
          match => { "message" => " Container update sweep of %{COPYFROMUNICODE:ContainerPath} completed: %{NUMBER:UpdatorCompleteTime:float}s, %{NUMBER:UpdatorSuccessNumbers:int} successes, %{NUMBER:UpdatorFailNumbers:int} failures, %{NUMBER:UpdatorNoChangeNumber:int} with no changes" }
          remove_tag => ["_grokparsefailure"]
          add_tag => ["swift", "CONT_UPD_SWEEP"]
        }
      }
      else if "Update report sent for" in [message] {
        grok {
          patterns_dir => ["/etc/logstash/patterns", "/etc/logstash/extra_patterns"]
          match => { "message" => " Update report sent for %{COPYFROMUNICODE:ContainerReplicatorReportFor} %{COPYFROMUNICODE:ReplicatingDBFilePath}" }
          remove_tag => ["_grokparsefailure"]
          add_tag => ["swift", "CONT_REP_DB"]
        }
      }
      else if "is not mounted" in [message] {
        grok {
          patterns_dir => ["/etc/logstash/patterns", "/etc/logstash/extra_patterns"]
          match => { "message" => " %{NOTSPACE:DrivesNotMounted} is not mounted" }
          remove_tag => ["_grokparsefailure"]
          add_tag => ["swift", "CONT_UPD_DRIVE_NOT_MOUNT"]
        }
      }
      else {
        grok {
          patterns_dir => ["/etc/logstash/patterns", "/etc/logstash/extra_patterns"]
          match => { "message" => " Container update sweep completed: %{NUMBER:UpdatorUpdateTime:float}s" }
          remove_tag => ["_grokparsefailure"]
          add_tag => ["swift", "CONT_UPD_FINISH"]
        }
      }
    }
    else if [severity] == "warning" {
      if "is not mounted" in [message] {
        grok {
          patterns_dir => ["/etc/logstash/patterns", "/etc/logstash/extra_patterns"]
          match => { "message" => " %{NOTSPACE:DrivesNotMounted} is not mounted" }
          remove_tag => ["_grokparsefailure"]
          add_tag => ["swift", "CONT_UPD_DRIVE_NOT_MOUNT"]
        }
      }
    }
  }
################################
# container server patterns
################################
  if [programname] == "container-server" {
    if [severity] == "info" or [severity] == "notice" {
      if "replicator-rpc-sync" in [message] {
        grok {
          patterns_dir => ["/etc/logstash/patterns", "/etc/logstash/extra_patterns"]
          match => { "message" => " replicator-rpc-sync time for info: %{NUMBER:ReplicatorRpcSyncTime:float}s" }
          remove_tag => ["_grokparsefailure"]
          add_tag => ["swift", "CONT_SER_REP_SYNC"]
        }
      }
      else if "ERROR __call__ error" in [message] {
        grok {
          patterns_dir => ["/etc/logstash/patterns", "/etc/logstash/extra_patterns"]
          match => { "message" => " ERROR __call__ error with %{NOTSPACE:request_method} %{COPYFROMUNICODE:ReplicatingObjectPath} : LockTimeout \(%{NUMBER:float:ContainerLockTime}s\) %{COPYFROMUNICODE:LockFileLocation}(?: \(txn: %{TXN:txn}\)|)" }
          remove_tag => ["_grokparsefailure"]
          add_tag => ["swift", "CONT_SER_ERR_LOCK"]
        }
      }
      else {
        grok {
          patterns_dir => ["/etc/logstash/patterns", "/etc/logstash/extra_patterns"]
          match => { "message" => "%{IP:remote_addr} - - \[%{SWIFT_DATETIME:datetime} \+0000\] \"%{WORD:request_method} %{URIPATHPARAM:request_path}\" %{NUMBER:status_int} (?:%{NUMBER:content_length}|-) \"(?:%{COPYFROMUNICODE:referer}|-)\" \"(?:%{TXN:transaction_id}|-)\" \"(?:%{COPYFROMUNICODE:user_agent}|-)\" %{NUMBER:request_time:float} \"-\" %{NUMBER:server_pid,int} (?:%{NUMBER:policy_index:int}|-)" }
          remove_tag => ["_grokparsefailure"]
          add_tag => ["swift", "CONT_SER_TRANSACTION"]
        }
      }
    }
    else if [severity] == "err" {
      if "ERROR with Container server" in [message] {
        grok {
          patterns_dir => ["/etc/logstash/patterns", "/etc/logstash/extra_patterns"]
          match => { "message" => "ERROR with Container server %{COPYFROMUNICODE:ContainerTranErrMsg} (?:\(txn: %{TXN:txn}\) \(client_ip: %{IP:client_ip}\)|\(txn: %{TXN:txn}\))" }
          remove_tag => ["_grokparsefailure"]
          add_tag => ["swift", "CONT_SER_TRANSACTION_ERR"]
        }
      }
    }
  }
}
